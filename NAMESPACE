useDynLib(aihuman, .registration=TRUE)

export(APCEsummary)
export(APCEsummaryipw)
export(AiEvalmcmc)
export(BootstrapAPCEipw)
export(BootstrapAPCEipwRE)
export(BootstrapAPCEipwREparallel)
export(CalAPCE)
export(CalAPCEipw)
export(CalAPCEipwRE)
export(CalAPCEparallel)
export(CalDIM)
export(CalDIMsubgroup)
export(CalDelta)
export(CalFairness)
export(CalOptimalDecision)
export(CalPS)
export(PlotAPCE)
export(PlotDIMdecisions)
export(PlotDIMoutcomes)
export(PlotFairness)
export(PlotOptimalDecision)
export(PlotPS)
export(PlotSpilloverCRT)
export(PlotSpilloverCRTpower)
export(PlotStackedBar)
export(PlotStackedBarDMF)
export(PlotUtilityDiff)
export(PlotUtilityDiffCI)
export(SpilloverCRT)
export(SpilloverCRTpower)
export(TestMonotonicity)
export(TestMonotonicityRE)
export(compute_nuisance_functions)
export(compute_nuisance_functions_ai)
export(g_legend)
import(Rcpp)
import(ggplot2)
importFrom(GLMMadaptive,mixed_model)
importFrom(MASS,polr)
importFrom(abind,abind)
importFrom(coda,mcmc)
importFrom(doParallel,registerDoParallel)
importFrom(dplyr,arrange)
importFrom(dplyr,bind_cols)
importFrom(dplyr,bind_rows)
importFrom(dplyr,case_when)
importFrom(dplyr,cross_join)
importFrom(dplyr,filter)
importFrom(dplyr,group_by)
importFrom(dplyr,group_nest)
importFrom(dplyr,if_else)
importFrom(dplyr,lag)
importFrom(dplyr,left_join)
importFrom(dplyr,mutate)
importFrom(dplyr,n)
importFrom(dplyr,relocate)
importFrom(dplyr,rename)
importFrom(dplyr,pull)
importFrom(dplyr,select)
importFrom(dplyr,summarise)
importFrom("forcats","fct_relevel")
importFrom(foreach,"%do%")
importFrom(foreach,"%dopar%")
importFrom(foreach,foreach)
importFrom(gbm,gbm)
importFrom(gbm,gbm.perf)
importFrom(magrittr,"%>%")
importFrom(metR,geom_text_contour)
importFrom(parallel,detectCores)
importFrom(purrr,map)
importFrom(purrr,pluck)
importFrom(purrr,rbernoulli)
importFrom(stats,glm)
importFrom(stats,model.matrix)
importFrom(stats,predict)
importFrom(stats,qnorm)
importFrom(stats,quantile)
importFrom(stringr,str_detect)
importFrom(tidyr,pivot_longer)
importFrom(tidyr,pivot_wider)
importFrom(tidyr,separate)
importFrom(tidyr,unnest)
importFrom(tidyselect,starts_with)

## export all regularly named functions
## (but allow for private functions whose name starts with a dot).name <- function(...)
exportPattern("^[[:alpha:]]+")